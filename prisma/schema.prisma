// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant family system
model Family {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     User[]
  calendars   Calendar[]
  groceryLists GroceryList[]
  chores      Chore[]

  @@map("families")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  familyId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  family        Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  calendars     Calendar[]
  groceryItems  GroceryItem[]
  assignedChores Chore[] @relation("ChoreAssignee")

  @@map("users")
}

model Calendar {
  id              String   @id @default(cuid())
  familyId        String
  userId          String
  googleCalendarId String
  name            String
  color           String   @default("#3b82f6") // Default blue color
  isVisible       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  family          Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([familyId, googleCalendarId])
  @@map("calendars")
}

model GroceryList {
  id        String   @id @default(cuid())
  familyId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  family    Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  items     GroceryItem[]

  @@map("grocery_lists")
}

model GroceryItem {
  id            String   @id @default(cuid())
  groceryListId String
  userId        String
  name          String
  quantity      String?
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  groceryList   GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("grocery_items")
}

model Chore {
  id          String   @id @default(cuid())
  familyId    String
  assignedToId String?
  title       String
  description String?
  dueDate     DateTime?
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  family      Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  assignedTo  User?  @relation("ChoreAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)

  @@map("chores")
}
